# meta developer: @mm_mods # –ú–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º, –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫

__version__ = "1.0"

import asyncio
import random
import logging
from telethon.tl.patched import Message

from .. import loader, utils

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø API GOOGLE GEMINI ---
# !!! –í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –í–ê–® API –ö–õ–Æ–ß GEMINI !!!
# –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å: https://ai.google.dev/gemini-api/docs/get-started/python
# –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–º–∏—Ç–µ "Get API Key" –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.
GEMINI_API_KEY = "AIzaSyCQijR-EI9Ird5YFPn1a2j3WQVH0g0qGPo" 
# –ù–∞–ø—Ä–∏–º–µ—Ä: "AIzaSyC2k_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ú–û–î–ï–õ–ò –ò –ü–ï–†–°–û–ù–ê–ñ–ê ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å. –ú–æ–¥–µ–ª—å 'gemini-2.5-flash-lite-preview-06-17' 
# –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π.
GEMINI_MODEL = "gemini-2.5-flash" 
# –í–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Telegram –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã –±–æ—Ç–∞
YOUR_TELEGRAM_NICKNAME = "–∫—Ä–µ–π–∫" 

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Google Gemini ---
# (–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è)
genai_client = None
try:
    import google.generativeai as genai
    genai.configure(api_key=GEMINI_API_KEY)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not GEMINI_API_KEY or GEMINI_API_KEY == "–í–ê–®_API_–ö–õ–Æ–ß_GEMINI_–ó–î–ï–°–¨":
        logging.getLogger(__name__).error(
            "Gemini API key is not set. Please replace '–í–ê–®_API_–ö–õ–Æ–ß_GEMINI_–ó–î–ï–°–¨' in the module code."
        )
    else:
        genai_client = genai
except ImportError:
    logging.getLogger(__name__).error(
        "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'google-genai' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ: pip install google-genai"
    )
except Exception as e:
    logging.getLogger(__name__).error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini API: {e}")

# --- –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø GEMINI ---
# –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π "–ø—Ä–æ–º–ø—Ç" –¥–ª—è AI, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
SYSTEM_INSTRUCTION = (
    f"–¢—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¢–µ–ª–µ–≥—Ä–∞–º —Å –Ω–∏–∫–Ω–µ–π–º–æ–º {YOUR_TELEGRAM_NICKNAME}. "
    "–¢–µ–±–µ 18 –ª–µ—Ç. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ 18-–ª–µ—Ç–Ω–∏–π —á–µ–ª–æ–≤–µ–∫. –ü–∏—à–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã. "
    "–£–ø–æ–º–∏–Ω–∞–π –Ω–∏–∫–Ω–µ–π–º –∏ –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–æ—Å—è—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ."
)

@loader.tds
class GeminiResponderMod(loader.Module):
    """
    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–∞ –±–∞–∑–µ Google Gemini AI.
    –ö–æ–º–∞–Ω–¥–∞ .ii –≤–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –æ—Ç–≤–µ—Ç—á–∏–∫ –≤ —á–∞—Ç–µ.
    –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–º–∏—Ç–∏—Ä—É—è —á–µ–ª–æ–≤–µ–∫–∞.
    """
    strings = {
        "name": "GeminiResponder",
        "gemini_off": "ü§ñ <b>Gemini AI –≤—ã–∫–ª—é—á–µ–Ω.</b>",
        "gemini_on": "üü¢ <b>Gemini AI –≤–∫–ª—é—á–µ–Ω.</b>",
        "no_api_key": "‚ùå –î–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º Google Gemini API –∫–ª—é—á. "
                      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ–¥ –º–æ–¥—É–ª—è 'gemini_responder.py'.",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "max_history_messages",
                30,
                lambda: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞.",
                validator=loader.validators.Integer(minimum=5, maximum=100),
            ),
            loader.ConfigValue(
                "min_response_delay",
                1.0,
                lambda: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).",
                validator=loader.validators.Float(minimum=0.5, maximum=10.0),
            ),
            loader.ConfigValue(
                "max_response_delay",
                4.0,
                lambda: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).",
                validator=loader.validators.Float(minimum=0.5, maximum=10.0),
            ),
            loader.ConfigValue(
                "max_output_tokens",
                80, # –î–µ–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –∫–æ—Ä–æ—Ç–∫–∏–º–∏
                lambda: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ Gemini (–¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏).",
                validator=loader.validators.Integer(minimum=20, maximum=200),
            ),
        )
        self.enabled_chats = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤–∫–ª/–≤—ã–∫–ª) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ enabled_chats –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Hikka
        self.enabled_chats = self.db.get(self.strings["name"], "enabled_chats", {})

    def get_db_value(self, key, default):
        return self.db.get(self.strings["name"], key, default)

    def set_db_value(self, key, value):
        self.db.set(self.strings["name"], key, value)

    @loader.command(ru_doc="–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç Gemini AI –æ—Ç–≤–µ—Ç—á–∏–∫ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ.")
    async def iicmd(self, message: Message):
        chat_id = str(utils.get_chat_id(message))
        is_enabled = self.enabled_chats.get(chat_id, False)

        if is_enabled:
            self.enabled_chats[chat_id] = False
            await message.edit(self.strings("gemini_off"))
        else:
            if not genai_client or not GEMINI_API_KEY or GEMINI_API_KEY == "–í–ê–®_API_–ö–õ–Æ–ß_GEMINI_–ó–î–ï–°–¨":
                await message.edit(self.strings("no_api_key"))
                await asyncio.sleep(5) # –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                await message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ .ii
                return

            self.enabled_chats[chat_id] = True
            await message.edit(self.strings("gemini_on"))

        self.set_db_value("enabled_chats", self.enabled_chats)
        await asyncio.sleep(1) # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.delete() # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É .ii

    @loader.watcher(outgoing=False, func=lambda m: m.text and not m.media and not m.via_bot and m.peer_id)
    async def gemini_watcher(self, message: Message):
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ Gemini AI –≤–∫–ª—é—á–µ–Ω –¥–ª—è —á–∞—Ç–∞,
        –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç.
        """
        chat_id = str(utils.get_chat_id(message))

        # –ï—Å–ª–∏ Gemini AI –Ω–µ –≤–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –≤—ã—Ö–æ–¥–∏–º
        if not self.enabled_chats.get(chat_id, False):
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Gemini
        if not genai_client or not GEMINI_API_KEY or GEMINI_API_KEY == "–í–ê–®_API_–ö–õ–Æ–ß_GEMINI_–ó–î–ï–°–¨":
            logging.getLogger(__name__).warning(
                f"Gemini AI –≤–∫–ª—é—á–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}, –Ω–æ API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."
            )
            return

        # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        try:
            await message.client.send_read_acknowledge(message.chat_id, message)
            await message.client.send_message(message.chat_id, action="typing")
        except Exception as e:
            logging.getLogger(__name__).warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞: {e}")

        # –£–º–Ω–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        message_len = len(message.text) if message.text else 0
        
        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ + —Ñ–∞–∫—Ç–æ—Ä –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –±–æ—Ç "—á–∏—Ç–∞–µ—Ç"
        base_delay_min = self.config["min_response_delay"]
        base_delay_max = self.config["max_response_delay"]
        len_factor_per_char = 0.02 # –î–æ–±–∞–≤–ª—è–µ–º 0.02 —Å–µ–∫—É–Ω–¥—ã –∑–∞ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
        
        target_delay = random.uniform(base_delay_min, base_delay_max) + message_len * len_factor_per_char
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π
        final_delay = max(0.5, min(target_delay, 7.0)) # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 0.5 –¥–æ 7 —Å–µ–∫—É–Ω–¥
        
        await asyncio.sleep(final_delay)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            history = []
            async for msg in self.client.iter_messages(
                message.chat_id, limit=self.config["max_history_messages"], reverse=True
            ): # reverse=True —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –ø–µ—Ä–≤—ã–º–∏
                if msg.text and not msg.media and not msg.via_bot and not msg.out: # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ, –Ω–µ –º–µ–¥–∏–∞, –Ω–µ –±–æ—Ç—ã, –Ω–µ —Å–≤–æ–∏
                    sender_name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    if msg.sender:
                        sender_name = msg.sender.first_name or msg.sender.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    elif msg.sender_chat: # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø
                        sender_name = msg.sender_chat.title or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    history.append(f"{sender_name}: {msg.text}")
                elif msg.out and msg.text and not msg.media: # –°–≤–æ–∏ –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    history.append(f"{YOUR_TELEGRAM_NICKNAME}: {msg.text}")
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini, –≤–∫–ª—é—á–∞—è –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ - —ç—Ç–æ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
            dialog_history = "\n".join(history[:-1]) # –í—Å—è –∏—Å—Ç–æ—Ä–∏—è, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (—Ç–µ–∫—É—â–µ–≥–æ) —Å–æ–æ–±—â–µ–Ω–∏—è
            current_message_text = message.text # –¢–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

            full_prompt = (
                f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: (\n{dialog_history}\n)\n\n"
                f"{SYSTEM_INSTRUCTION}\n\n"
                f"–¢—ã –¥–æ–ª–∂–µ–Ω –∫–æ—Ä–æ—Ç–∫–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å: ({current_message_text})"
            )

            model = genai_client.GenerativeModel(GEMINI_MODEL)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            generation_config = {
                "temperature": 0.9, # –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (0.0-1.0)
                "top_p": 1,
                "top_k": 1,
                "max_output_tokens": self.config["max_output_tokens"], # –ö—Ä–∞—Ç–∫–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
                "response_mime_type": "text/plain", # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            }

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±–æ–ª–µ–µ –∂–µ—Å—Ç–∫—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é)
            safety_settings = [
                {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
            ]

            response = await model.generate_content(
                contents=[full_prompt],
                safety_settings=safety_settings,
                generation_config=generation_config,
            )
            
            response_text = response.text.strip()
            
            if response_text:
                await message.reply(response_text)

        except Exception as e:
            logging.getLogger(__name__).error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Gemini AI: {e}", exc_info=True)
            # await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.") # –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
