# meta developer: @modwini

from .. import loader
from asyncio import sleep
import logging
from telethon import events
from telethon.tl.patched import Message
import g4f
import random

logger = logging.getLogger(__name__)

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä—Å–∏–∏ g4f –∏ –≤–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
g4f.debug.logging = True
g4f.check_version = False

@loader.tds
class Gpt4PersonaMod(loader.Module):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è Hikka, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—á–∞—Ç—å –≤ —á–∞—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã "–ö—Ä–µ–π–∫"
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPT4Free.
    """

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "g4f_model",
                "gpt-3.5-turbo",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º gpt-3.5-turbo –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                lambda: self.strings("g4f_model_h"),
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "persona_name",
                "–∫—Ä–µ–π–∫",
                lambda: self.strings("persona_name_h"),
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "history_limit",
                30,
                lambda: self.strings("history_limit_h"),
                validator=loader.validators.Integer(minimum=5, maximum=100),
            ),
            loader.ConfigValue(
                "min_delay",
                2,
                lambda: self.strings("min_delay_h"),
                validator=loader.validators.Integer(minimum=0, maximum=10),
            ),
            loader.ConfigValue(
                "max_delay",
                5,
                lambda: self.strings("max_delay_h"),
                validator=loader.validators.Integer(minimum=0, maximum=10),
            ),
        )
        self.active_chats = {}  # {chat_id: True/False} - –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.active_chats = self.db.get("Gpt4PersonaMod", "active_chats", {})

        self.client.add_event_handler(
            self.on_new_message,
            events.NewMessage(incoming=True, outgoing=False)
        )

    strings = {
        "name": "Gpt4Persona",
        "g4f_model_h": "–ú–æ–¥–µ–ª—å GPT4Free –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'gpt-3.5-turbo', 'gpt-4').",
        "persona_name_h": "–ò–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å AI (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–µ–π–∫')",
        "history_limit_h": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ—Ç 5 –¥–æ 100).",
        "min_delay_h": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "max_delay_h": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "ii_on": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ {}.",
        "ii_off": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤—ã–∫–ª—é—á–µ–Ω.",
        "ii_deleted": "```.ii``` (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)",
        "processing": "```–¥—É–º–∞—é...```",
        "error_processing": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {}",
        "error_timeout": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "not_text": "Gpt4Persona –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "_cmd_doc_ii": "–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."
    }

    strings_ru = {
        "name": "Gpt4Persona",
        "g4f_model_h": "–ú–æ–¥–µ–ª—å GPT4Free –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'gpt-3.5-turbo', 'gpt-4').",
        "persona_name_h": "–ò–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å AI (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–µ–π–∫')",
        "history_limit_h": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ—Ç 5 –¥–æ 100).",
        "min_delay_h": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "max_delay_h": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "ii_on": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ {}.",
        "ii_off": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤—ã–∫–ª—é—á–µ–Ω.",
        "ii_deleted": "```.ii``` (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)",
        "processing": "```–¥—É–º–∞—é...```",
        "error_processing": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {}",
        "error_timeout": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "not_text": "Gpt4Persona –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "_cmd_doc_ii": "–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."
    }

    @loader.command("ii")
    async def iicmd(self, m: Message):
        """Toggle Gpt4 persona for current chat."""
        chat_id = utils.get_chat_id(m)
        persona_name = self.config["persona_name"]

        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
            await m.delete()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∞ –Ω–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å MessageIdInvalidError
            await utils.answer(m, self.strings("ii_deleted"))
        except Exception as e:
            logger.error(f"Error deleting command message or sending confirmation: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            pass

        if self.active_chats.get(chat_id, False):
            self.active_chats[chat_id] = False
            await utils.answer(m, self.strings("ii_off"))
        else:
            self.active_chats[chat_id] = True
            await utils.answer(m, self.strings("ii_on").format(persona_name))

        self.db.set("Gpt4PersonaMod", "active_chats", self.active_chats)

    async def on_new_message(self, event):
        m = event.message

        if not m.is_private and not m.is_group:
            return

        chat_id = utils.get_chat_id(m)
        if not self.active_chats.get(chat_id, False):
            return  # –†–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ

        me = await self.client.get_me()
        if m.sender_id == me.id:
            return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ (–≤–∞—à–µ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞ Hikka)

        if m.text and m.text.startswith(".ii"):
            return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É .ii, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ç–ª–∏

        if not m.text:
            # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –∏ –Ω–µ —Å–ø–∞–º–∏–º "not_text" –≤ —á–∞—Ç.
            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –±—ã reply, —Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ.
            # –ù–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å.
            return

        persona_name = self.config["persona_name"]
        history_limit = self.config["history_limit"]
        min_delay = self.config["min_delay"]
        max_delay = self.config["max_delay"]
        g4f_model = self.config["g4f_model"]

        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        delay = random.uniform(min_delay, max_delay)
        await asyncio.sleep(delay)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–¥—É–º–∞—é..." —Å–æ–æ–±—â–µ–Ω–∏–µ
        thinking_message = await utils.answer(m, self.strings("processing"))

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            history_messages = []
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º limit+1, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ current_message
                async for historic_msg in self.client.iter_messages(chat_id, limit=history_limit):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ historic_msg.text –Ω–µ None –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
                    if historic_msg.text and historic_msg.id != m.id:
                        sender_name = persona_name if historic_msg.sender_id == me.id else (historic_msg.sender.first_name or historic_msg.sender.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_{historic_msg.sender_id}")
                        history_messages.append(f"{sender_name}: {historic_msg.text}")
            except Exception as e:
                logger.warning(f"Failed to fetch chat history: {e}. Proceeding without full history.", exc_info=True)
                # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å, —Ç–æ history_messages –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—É—Å—Ç—ã–º,
                # –∏ –ø—Ä–æ–º—Ç –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏.

            # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –≤ –Ω–∞—á–∞–ª–µ
            history_messages.reverse()
            history_string = "\n".join(history_messages)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç —Å —É—á–µ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω—ã –∏ —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–∞
            prompt_parts = []
            if history_string:
                prompt_parts.append(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n{history_string}")
            
            prompt_parts.append(
                f"–¢—ã ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ª–µ–≥—Ä–∞–º–∞ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º '{persona_name}'. "
                f"–¢–µ–±–µ 18 –ª–µ—Ç, –∏ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ). "
                f"–ù–µ —É–ø–æ–º–∏–Ω–∞–π —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç, –µ—Å–ª–∏ —Ç–µ–±—è –æ–± —ç—Ç–æ–º –ø—Ä—è–º–æ –Ω–µ —Å–ø—Ä–æ—Å—è—Ç. "
                f"–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
                f"[{m.sender.first_name or m.sender.username or '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫'}]: {m.text}"
            )
            
            full_prompt = "\n\n".join(prompt_parts)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GPT4Free
            response = g4f.ChatCompletion.create(
                model=g4f_model,
                messages=[{"role": "user", "content": full_prompt}],
                stream=False, # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                timeout=30 # –¢–∞–π–º–∞—É—Ç –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
            )
            
            response_text = response.strip() # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é..." –Ω–∞ –æ—Ç–≤–µ—Ç –æ—Ç AI
            await utils.answer(thinking_message, response_text)

        except g4f.errors.ModelNotSupportedError as e:
            logger.error(f"G4F Model not supported: {e}", exc_info=True)
            await utils.answer(thinking_message, f"‚ùå –û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å `{g4f_model}` –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ `.config Gpt4Persona`.")
        except asyncio.TimeoutError:
            await utils.answer(thinking_message, self.strings("error_timeout"))
        except Exception as e:
            logger.error(f"Error getting response from Gpt4: {e}", exc_info=True)
            await utils.answer(thinking_message, self.strings("error_processing").format(e))

# rap module (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç.–∫. –Ω–µ —Å–≤—è–∑–∞–Ω —Å AI)
@loader.tds
class rap(loader.Module):
    strings = {"name": "–†–µ–ø –æ–∫—Å–∏–º–∏—Ä–æ–Ω–∞"}

    @loader.owner
    async def rapcmd(self, message):
        for _ in range(1):
            for rap_word in ["–ì–æ–≤–Ω–æ", "–∑–∞–ª—É–ø–∞", "–ø–µ–Ω–∏—Å", "—Ö–µ—Ä", "–¥–∞–≤–∞–ª–∫–∞", "—Ö—É–π", "–±–ª—è–¥–∏–Ω–∞",
"–ì–æ–ª–æ–≤–∫–∞", "—à–ª—é—Ö–∞", "–∂–æ–ø–∞", "—á–ª–µ–Ω", "–µ–±–ª–∞–Ω", "–ø–µ—Ç—É—Ö‚Ä¶", "–ú—É–¥–∏–ª–∞",
"–†—É–∫–æ–±–ª—É–¥", "—Å—Å–∞–Ω–∏–Ω–∞", "–æ—á–∫–æ", "–±–ª—è–¥—É–Ω", "–≤–∞–≥–∏–Ω–∞",
"–°—É–∫–∞", "–µ–±–ª–∞–Ω–∏—â–µ", "–≤–ª–∞–≥–∞–ª–∏—â–µ", "–ø–µ—Ä–¥—É–Ω", "–¥—Ä–æ—á–∏–ª–∞",
"–ü–∏–¥–æ—Ä", "–ø–∏–∑–¥–∞", "—Ç—É–∑", "–º–∞–ª–∞—Ñ—å—è",
"–ì–æ–º–∏–∫", "–º—É–¥–∏–ª–∞", "–ø–∏–ª–æ—Ç–∫–∞", "–º–∞–Ω–¥–∞"
"–ê–Ω—É—Å", "–≤–∞–≥–∏–Ω–∞", "–ø—É—Ç–∞–Ω–∞", "–ø–µ–¥—Ä–∏–ª–∞",
"–®–∞–ª–∞–≤–∞", "—Ö—É–∏–ª–æ", "–º–æ—à–æ–Ω–∫–∞", "–µ–ª–¥–∞‚Ä¶",
"–†–∞—É–Ω–¥!"]:
                await message.edit(rap_word)
                await sleep(0.3)

# DemotivatorsMod (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç.–∫. –Ω–µ —Å–≤—è–∑–∞–Ω —Å AI)
from PIL import Image, ImageDraw, ImageOps, ImageFont
from textwrap import wrap
import io
import requests

logger = logging.getLogger(__name__)

@loader.tds
class DeMoTiVaToRsMod(loader.Module):
    """–î–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ—Ç @SomeScripts by @DneZyeK"""
    strings = {
        "name": "SuperDemotivator"
    }

    async def client_ready(self, client, db):
        self.client = client
    
    @loader.owner
    async def demoticmd(self, message):
        """—Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ
           –Ω–µ –º–Ω—ë—Ç —Ñ–æ—Ç–∫–∏"""
        await cmds(message, 0)
        
    async def demotcmd(self, message):
        """—Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ
           –º–Ω—ë—Ç —Ñ–æ—Ç–∫–∏"""
        await cmds(message, 1)
        
async def cmds(message, type):
    event, is_reply = await check_media(message)
    if not event:
        await message.edit("<b>–û—Ç–≤–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É!</b>")
        return
    text = utils.get_args_raw(message)
    
    if not text:
        text = random.choice(tttxxx)
        
    await message.edit("<b>–î–µ–º–æ—Ç–∏–≤–∏—Ä—É—é...</b>")
    bytes_image = await event.download_media(bytes)
    demotivator = await demotion(font_bytes, bytes_image, text, type)
    if is_reply:
        await message.delete()
        return await event.reply(file=demotivator)
        
    else:
        return await event.edit(file=demotivator, text="")
    
async def check_media(message):
    reply = await message.get_reply_message()
    is_reply = True
    if not reply:
        reply = message
        is_reply = False
    if not reply.file:
        return False, ...
    mime = reply.file.mime_type.split("/")[0].lower()
    if mime != "image":
        return False, ...
    return reply, is_reply
    
async def textwrap(text, length=50, splitter = "\n\n"):
    out = []
    lines = text.rsplit(splitter, 1)
    for text in lines:
        txt = []
        parts = text.split("\n")
        for part in parts:
            part = "\n".join(wrap(part, length))
            txt.append(part)
        text = "\n".join(txt)
        out.append(text)
    return out

async def draw_main(
            bytes_image,
            type,
            frame_width_1 = 5,
            frame_fill_1 = (0, 0, 0),
            frame_width_2 = 3,
            frame_fill_2 = (255, 255, 255),
            expand_proc = 10,
            main_fill = (0, 0, 0)
            ):
                
    main_ = Image.open(io.BytesIO(bytes_image))
    main = Image.new("RGB", main_.size, "black")
    main.paste(main_, (0, 0))
    if type == 1:
        main = main.resize((700, 550))
    main = ImageOps.expand(main, frame_width_1, frame_fill_1)
    main = ImageOps.expand(main, frame_width_2, frame_fill_2)
    w, h = main.size
    h_up = expand_proc*(h//100)
    im = Image.new("RGB", (w+(h_up*2), h+h_up), main_fill)
    im.paste(main, (h_up, h_up))
    return im

async def _draw_text(
            text,
            font_bytes,
            font_size,
            font_add = 20,
            main_fill = (0, 0, 0),
            text_fill = (255, 255, 255),
            text_align = "center"
            ):
                
    font = ImageFont.truetype(io.BytesIO(font_bytes), font_size)
    w_txt, h_txt = ImageDraw.Draw(Image.new("RGB", (1, 1))).multiline_textsize(text=text, font=font)
    txt = Image.new("RGB", (w_txt, h_txt+font_add), main_fill)
    ImageDraw.Draw(txt).text((0, 0), text=text, font=font, fill=text_fill, align=text_align)
    return txt
    
async def text_joiner(text_img_1, text_img_2, main_fill = (0, 0, 0)):
    w_txt_1, h_txt_1 = text_img_1.size
    w_txt_2, h_txt_2 = text_img_2.size
    w = max(w_txt_1, w_txt_2)
    h = h_txt_1 + h_txt_2
    text = Image.new("RGB", (w, h), main_fill)
    text.paste(text_img_1, ((w-w_txt_1)//2, 0))
    text.paste(text_img_2, ((w-w_txt_2)//2, h_txt_1))
    return text
    
async def draw_text(text, font_bytes, font_size):
    text = await textwrap(text)
    if len(text) == 1:
        text = await _draw_text(text[0], font_bytes, font_size[0] )
    else:
        text_img_1 = await _draw_text(text[ 0], font_bytes, font_size[0])
        text_img_2 = await _draw_text(text[-1], font_bytes, font_size[1])
        text = await text_joiner(text_img_1, text_img_2)
    return text
    
async def text_finaller(text, main, expand_width_proc = 25, main_fill = (0, 0, 0)):
    x = min(main.size)
    w_txt, h_txt = text.size
    w_proc = expand_width_proc*(w_txt//100)
    h_proc = expand_width_proc*(h_txt//100)
    back = Image.new("RGB", (w_txt+(w_proc*2), h_txt+(h_proc*2)), main_fill)
    back.paste(text, (w_proc, h_proc))
    back.thumbnail((x, x))
    return back
    
    
async def joiner(text_img, main_img, format_save="JPEG"):
    w_im, h_im = main_img.size
    w_txt, h_txt = text_img.size
    text_img.thumbnail((min(w_im, h_im), min(w_im, h_im)))
    w_txt, h_txt = text_img.size
    main_img = main_img.crop((0, 0, w_im, h_im+h_txt))
    main_img.paste(text_img, ((w_im-w_txt)//2, h_im))
    output = io.BytesIO()
    main_img.save(output, format_save)
    output.seek(0)
    return output.getvalue()
    
async def demotion(font_bytes, bytes_image, text, type):
    main = await draw_main(bytes_image, type)
    font_size = [20*(min(main.size)//100), 15*(min(main.size)//100)]
    text = await draw_text(text, font_bytes, font_size)
    text = await text_finaller(text, main)
    output = await joiner(text, main)
    return output

tttxxx = ['–ê —á–µ', '–∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è', '–ñ–∞–ª–∫–æ –ø–∞—Ü–∞–Ω–∞', '—Ç—ã —á–µ —Å—É–∫–∞??', '–ê–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê\n\n–ê–ê–•–ê–•–ê–ê–•–ê–•–ê', '–ì–ò–ì–ê–ù–¢ –ú–´–°–õ–ò\n\n–æ—Ç–µ—Ü —Ä—É—Å—Å–∫–æ–π –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∏', '–û–Ω', '–ß–¢–û –ë–õ–Ø–¢–¨?', '–æ—Ö—É–µ–Ω–Ω–∞—è —Ç–µ–º–∞', '–í–û–¢ –û–ù–ò\n\n—Ç–∏–ø–∏—á–Ω—ã–µ –∫–æ–º–µ–¥–∏–∫–ª–∞–±–æ–≤—Å–∫–∏–µ —à—É—Ç–∫–∏', '–ù–£ –ù–ï –ë–õ–Ø–î–ò–ù–ê?', '–£–∑–Ω–∞–ª–∏?', '–°–æ–≥–ª–∞—Å–Ω—ã?', '–í–æ—Ç —ç—Ç–æ –º—É–∂–∏–∫', '–ï–ì–û –ò–î–ï–ò\n\n–±—É–¥—É—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã –≤—Å–µ–≥–¥–∞', '\n\n–ü–†–ò –°–¢–ê–õ–ò–ù–ï –û–ù –ë–´ –°–ò–î–ï–õ', '–æ –≤–∞–¥–∏–º', '2 –º–µ—Å—è—Ü–∞ –Ω–∞ –¥–≤–∞—á–µ\n\n–∏ —ç—Ç–æ, –±–ª—è–¥—å, –Ω–∏—Ö—É—è –Ω–µ —Å–º–µ—à–Ω–æ', '–ß—Ç–æ –¥–∞–ª—å—à–µ?\n\n–ß–∞–π–Ω–∏–∫ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –∂–æ–ø–∞?', '\n\n–ò –Ω–∞—Ö—É—è –º–Ω–µ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?', '–í–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç', '–Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç', '–ü–æ–∫–∞–∑–∞–ª–æ—Å—å', '–°—É–¥—ã –ø—Ä–∏ –∞–Ω–∫–∞–ø–µ', '–•—É–π–ª–æ —Å —Ä–∞–π–æ–Ω–∞\n\n\n\n—Ç–∞–∫–∞—è —à–µ–ª—É–ø–æ–Ω—å —Å –æ–¥–Ω–æ–π —Ç—ã—á–∫–∏ –ª—è–∂–µ—Ç', '–ë—Ä—É—Ö', '–†–∞—Å—Å–∫–∞–∂–∏ –∏–º\n\n–∫–∞–∫ —Ç—ã —É—Å—Ç–∞–ª –≤ –æ—Ñ–∏—Å–µ', '–û–∫—É—Ä–æ–∫ –±–ª—è—Ç—å\n\n–µ—Å—Ç—å 2 —Ä—É–±–ª—è?', '–ê–Ω–∏–º–µ —Å—Ç–∞–≤—à–µ–µ –ª–µ–≥–µ–Ω–¥–æ–π', '–°–ú–ò–†–ò–°–¨\n\n\n\n—Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–Ω–µ—à—å –Ω–∞—Å—Ç–æ–ª—å–∫–æ –∂–µ –∫—Ä—É—Ç—ã–º', '–∞ –≤–µ–¥—å —ç—Ç–æ –∏–¥–µ—è', '\n\n–ï—Å–ª–∏ –Ω–µ –ª–∞–π–∫–Ω–µ—à—å —É —Ç–µ–±—è –Ω–µ—Ç —Å–µ—Ä–¥—Ü–∞', '–í–º–µ—Å—Ç–æ —Ç—ã—Å—è—á–∏ —Å–ª–æ–≤', '–®–ê–• –ò –ú–ê–¢!!!', '–°–∞–º—ã–π –±–æ–ª—å—à–æ–π —á–ª–µ–Ω –≤ –º–∏—Ä–µ\n\n–£ —ç—Ç–æ–π –¥–µ–≤—É—à–∫–∏', '–ù–µ–º–Ω–æ–≥–æ\n\n–ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º–∞', '–∫—Ç–æ', '\n\n—ç—Ç–∞ —Å—É–∫–∞ —É–≤–æ–¥–∏—Ç —á—É–∂–∏—Ö –º—É–∂–µ–π', '–ö—Ç–æ –æ–Ω???', '\n\n–í—ã —Ç–æ–∂–µ —Ö–æ—Ç–µ–ª–∏ –Ω–∞—Å—Ä–∞—Ç—å —Ç—É–¥–∞ –≤ –¥–µ—Ç—Å—Ç–≤–µ?', '\n\n–í—Å—è —Å—É—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞\n\n–≤ –æ–¥–Ω–æ–º —Ñ–æ—Ç–æ', '–û–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∂–∏–≤–µ—Ç!', '\n\n–í—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ä–æ—á–∏—Ç—å –µ–º—É?', '\n\n–ò –≤–æ—Ç —ç—Ç–æ–π —Ö—É–π–Ω–µ –ø–æ–∫–ª–æ–Ω—è—é—Ç—Å—è —Ä—É—Å—Å–∫–∏–µ?', '–í–æ—Ç –æ–Ω–∞ —Å—É—Ç—å\n\n\n\n—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞ –≤ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ', '–í—ã –¥—É–º–∞–ª–∏ —ç—Ç–æ —Ä–æ—Ñ–ª?\n\n–ù–µ—Ç —ç—Ç–æ –∂–æ–ø–∞', '\n\n–ü—Ä–∏ —Å—Ç–∞–ª–∏–Ω–µ —Ç–∞–∫–æ–π —Ö—É–π–Ω–∏ –Ω–µ –±—ã–ª–æ\n\n–ê —É –≤–∞—Å –±—ã–ª–æ?', '–û–Ω –≥—Ä—ã–∑ –ø—Ä–æ–≤–æ–¥–∞', '–ù–∞–∑–ª–æ —Å—Ç–∞—Ä—É—Ö–∞–º\n\n–Ω–∞ —Ä–∞–¥–æ—Å—Ç—å –æ–Ω–∞–Ω–∏—Å—Ç–∞–º', '–ì–¥–µ-—Ç–æ –≤ –ß–µ–ª—è–±–∏–Ω—Å–∫–µ', '–ê–≥–∏—Ç–∞—Ü–∏—è –∑–∞ –ü–æ—Ä–æ—à–µ–Ω–∫–æ', '–ò–î–ï–ê–õ–¨–ù–û', '–ì—Ä—ã–∑?', '–ù—É –¥–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∂–∏ –∏–º\n\n–∫–∞–∫–∞—è —É —Ç–µ–±—è —Ç—è–∂–µ–ª–∞—è —Ä–∞–±–æ—Ç–∞', '\n\n–ñ–µ–ª–∞—é –≤ –∫–∞–∂–¥–æ–º –¥–æ–º–µ —Ç–∞–∫–æ–≥–æ –≥–æ—Å—Ç—è', '–®–∫—É—Ä–∞ –Ω–∞ –≤—ã—Ä–æ—Å—Ç', '–ù–ò–ö–û–ì–î–ê\n\n–Ω–µ —Å–¥–∞–≤–∞–π—Å—è', '–û–ø–ø–∞ –≥–∞–Ω–≥–Ω–∞–º —Å—Ç–∞–π–ª\n\n—É—É—É—É —Å—ç–∫—Å–∏ –ª–µ–π–¥–∏ –æ–ø –æ–ø', '–û–Ω–∏ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ\n\n—Å—É–∫–∏–Ω—ã –¥–µ—Ç–∏, –æ–Ω–∏ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å', '–≠—Ç–∞ —Å—É–∫–∞\n\n—Ö–æ—á–µ—Ç –¥–µ–Ω–µ–≥', '–≠—Ç–æ –≥–æ–≤–Ω–æ, –∞ —Ç—ã?', '\n\n–í–æ—Ç –æ–Ω–∞ –Ω—ã–Ω–µ—à–Ω—è—è –º–æ–ª–æ–¥–µ–∂—å', '–ü–æ–≥–ª–∞–¥—å –∫–æ—Ç–∞\n\n–ø–æ–≥–ª–∞–¥—å –∫–æ—Ç–∞ —Å—É–∫–∞', '–Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∂–∏–≤—É', '\n\n–í–æ—Ç –æ–Ω–∞, –Ω–∞—Å—Ç–æ—è—â–∞—è –º—É–∂—Å–∫–∞—è –¥—Ä—É–∂–±–∞\n\n–±–µ–∑ –ø–æ–ª–∏—Ç–∏–∫–∏ –∏ –ª–∏—Ü–∏–º–µ—Ä–∏—è', '\n\n–û–ë–ò–î–ù–û –ß–¢–û –Ø –ñ–ò–í–£ –í –°–¢–†–ê–ù–ï\n\n–≥–¥–µ –≥–∞–Ω—Ç–µ–ª–∏ —Å—Ç–æ—è—Ç –≤ 20 —Ä–∞–∑ –¥–æ—Ä–æ–∂–µ —á–µ–º –±—É—Ç—ã–ª–∫–∞ –≤–æ–¥–∫–∏', '–¶–∞—Ä—å, –ø—Ä–æ—Å—Ç–æ —Ü–∞—Ä—å', '\n\n–ù–∞—Ö—É–π –≤—ã —ç—Ç–æ –≤ —É—á–µ–±–Ω–∏–∫–∏ –≤—Å—Ç–∞–≤–∏–ª–∏?\n\n–ò –µ—â—ë –µ–±–∞–Ω—É—é –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —É—Å—Ç—Ä–æ–∏–ª–∏', '\n\n–≠–¢–û –ù–ê–°–¢–û–Ø–©–ê–Ø –ö–†–ê–°–û–¢–ê\n\n–∞ –Ω–µ –≤–∞—à–∏ –≥–æ–ª—ã–µ –±–ª—è–¥–∏', '\n\n–¢–µ–º–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∞ –ü–û–õ–ù–û–°–¢–¨–Æ', '\n\n–†–û–°–°–ò–Ø, –ö–û–¢–û–†–£–Æ –ú–´ –ü–û–¢–ï–†–Ø–õ–ò', '–≠–¢–û - –Ø\n\n–ü–û–î–£–ú–ê–ô –ú–û–ñ–ï–¢ –≠–¢–û –¢–´', '–ø–æ—á–µ–º—É\n\n—á—Ç–æ –ø–æ—á–µ–º—É', '–ö–£–ü–ò–¢–¨ –ë–´ –î–ñ–´–ü\n\n–ë–õ–Ø–¢–¨ –î–ê –ù–ê–•–£–ô –ù–ê–î–û', '\n\n\n\n–º—ã –Ω–µ –ø—Ä–æ–¥–∞—ë–º –±–æ–º–±–∞—Å—Ç–µ—Ä –ª–∏—Ü–∞–º —Å—Ç–∞—Ä—à–µ 12 –ª–µ—Ç', '–ú–†–ê–ó–¨', '–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—ç—Ä–æ–≥—Ä–∞—Ñ–∏—è', '–í–æ—Ç –æ–Ω–∞ —Ä—É—Å—Å–∫–∞—è\n\n–°–ú–ï–ö–ê–õ–û–ß–ö–ê', '–û–Ω –≤–∑—è–ª —Ä–µ—Ö—Å—Ç–∞–≥!\n\n–ê —á–µ–≥–æ –¥–æ–±–∏–ª—Å—è —Ç—ã?', '–ù–∞ –∞–≤–∞—Ç–∞—Ä–∫—É', '–§–æ—Ç–æ—à–æ–ø –ø–æ-–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ —Å–∞–º–æ–ª–µ—Ç–µ', '–¶–∏—Ä–∫ –¥—é –°–æ–ª–µ–π', '–í–∫—É—Å –¥–µ—Ç—Å—Ç–≤–∞\n\n—à–∫–æ–ª–æ—Ç–µ –Ω–µ –ø–æ–Ω—è—Ç—å', '–í–æ—Ç –æ–Ω–æ - –°–ß–ê–°–¢–¨–ï', '–û–Ω –∑–∞ —Ç–µ–±—è –≤–æ–µ–≤–∞–ª\n\n–∞ —Ç—ã –¥–∞–∂–µ –Ω–µ –∑–Ω–∞–µ—à—å –µ–≥–æ –∏–º–µ–Ω–∏', '–ó–∞—Ç–æ –Ω–µ –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º', '\n\n–ù–µ —Ç—Ä–æ–≥–∞–π —ç—Ç–æ –Ω–∞ –Ω–æ–≤—ã–π –≥–æ–¥', '–ú–æ–π –ø–µ—Ä–≤—ã–π —Ä–∏—Å—É–Ω–æ–∫\n\n–º–æ—á–æ–π –Ω–∞ —Å–Ω–µ–≥—É', '\n\n–ú–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –Ω–∞ –¥–∞—á–µ', '–í–∞—à –ø–∏–∑–¥—é–∫?', '–¢–µ—Å—Ç –¥—Ä–∞–π–≤ –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤', '–ù–µ –ø–æ–Ω–∏–º–∞—é\n\n–∫–∞–∫ —ç—Ç–æ –≤–æ–æ–±—â–µ –≤—ã—Ä–æ—Å–ª–æ?', '–°—É–ø–µ—Ä–º–µ–Ω –≤ –°–°–°–†', '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π\n\n–∫—Ç–æ —Ç–µ–±–µ —Ä–∞–¥', '–ú–∞–∫–¥–æ–Ω–∞–ª—å–¥—Å –æ—Ç–¥—ã—Ö–∞–µ—Ç', '–ù—É —á–µ\n\n –∫–∞–∫ –¥–µ–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ –ø–∞—Ü–∞–Ω—ã?', '–í—Å—è —Å—É—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π', '–ë–µ–ª–∞—Ä—É—Å—ã, —Å–ø–∞—Å–∏–±–æ!', '\n\n–£ –¥–≤–µ—Ä–µ–π —É–∑–±–µ–∫—Å–∫–æ–≥–æ –≤–æ–µ–Ω–∫–æ–º–∞—Ç–∞', '–í–º–µ—Å—Ç–æ 1000 —Å–ª–æ–≤', '–û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å\n\n–Ω–∞—Ö—É—è?', '–û—Ç–≤–µ—Ç –Ω–∞ —Å–∞–Ω–∫—Ü–∏–∏\n\n–ï–í–†–û–ü–´', '–¶–´–ì–ê–ù–°–ö–ò–ï –§–û–ö–£–°–´', '–ë–ª—è—Ç—å!\n\n–¥–∞ –æ–Ω –≥–µ–Ω–∏–π!', '\n\n–£–∫—Ä–∞–∏–Ω–∞ –∏—â–µ—Ç –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–∞–∑–∞', '–í–û–¢ –≠–¢–û\n\n–ù–ê–°–¢–û–Ø–©–ò–ï –ö–ê–ó–ê–ö–ò –∞ –Ω–µ —Ä—è–∂–µ–Ω–Ω—ã–µ', '–ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ –Ω–µ –±—É–¥–µ—Ç\n\n–°–∞–Ω—Ç–∞ –ø—Ä–∏–Ω—è–ª –ò—Å–ª–∞–º', '\n\n–û–Ω –±—ã–ª –ø—Ä–æ—Ç–∏–≤ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤\n\n–∞ —Ç—ã –∏ –¥–∞–ª—å—à–µ —É–±–∏–≤–∞–π —Å–µ–±—è', '–í—Å–µ–º –ø–æ—Ö—É–π!\n\n–í—Å–µ–º –ø–æ—Ö—É–π!', '–ë–†–ê–¢–¨–Ø –°–õ–ê–í–Ø–ù–ï\n\n–ø–æ–º–Ω–∏—Ç–µ –¥—Ä—É–≥ –æ –¥—Ä—É–≥–µ', '\n\n–û–ù –ü–†–ò–î–£–ú–ê–õ –ì–û–í–ù–û\n\n–∞ —Ç—ã –¥–∞–∂–µ –Ω–µ –∑–Ω–∞–µ—à—å –µ–≥–æ –∏–º–µ–Ω–∏', '\n\n–∫—Ä–∞—Ç–∫–∏–π –∫—É—Ä—Å –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—Ü–±–æ–ª–æ–≤', '–≠–ø–æ—Ö–∞ —Ä–µ–Ω–µ—Å—Å–∞–Ω—Å–∞']
font_bytes = requests.get("https://raw.githubusercontent.com/KeyZenD/l/master/times.ttf").content

# DelmeMod (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç.–∫. –Ω–µ —Å–≤—è–∑–∞–Ω —Å AI)
@loader.tds
class DelmeMod(loader.Module):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    strings = {'name': 'DelMe'}
    @loader.sudo
    async def delmecmd(self, message):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–µ–±—è"""
        chat = message.chat
        if chat:
            args = utils.get_args_raw(message)
            if args != str(message.chat.id+message.sender_id):
                await message.edit(f"<b>–ï—Å–ª–∏ —Ç—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, —Ç–æ –Ω–∞–ø–∏—à–∏:</b>\n<code>.delme {message.chat.id+message.sender_id}</code>")
                return
            await delete(chat, message, True)
        else:
            await message.edit("<b>–í –ª—Å –Ω–µ —á–∏—â—É!</b>")
    @loader.sudo
    async def delmenowcmd(self, message):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–µ–±—è –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        chat = message.chat
        if chat:
            await delete(chat, message, False)
        else:
            await message.edit("<b>–í –ª—Å –Ω–µ —á–∏—â—É!</b>")

async def delete(chat, message, now):
    if now:
        all = (await message.client.get_messages(chat, from_user="me")).total
        await message.edit(f"<b>{all} —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ!</b>")
    else: await message.delete()
    _ = not now
    async for msg in message.client.iter_messages(chat, from_user="me"):
        if _:
            await msg.delete()
        else:
            _ = "_"
    await message.delete() if now else "—Ö—É–ª–∏ –º—É—Å–∞—Ä–∞ —Ö—É–ª–∏ –º—É—Å–∞—Ä–∞ —Ö—É–ª–∏, –µ–¥–µ–º —Ç–∞–∫ –∫–∞–∫ –µ—Ö–∞–ª–∏ –¥–∞–∂–µ –≤ —Ö—É–π –Ω–µ –¥—É–ª–∏"

# MSMod (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç.–∫. –Ω–µ —Å–≤—è–∑–∞–Ω —Å AI)
# @loader.tds # –≠—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. register —É–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Å
class MSMod(loader.Module):
    """–°–ø–∞–º–º–µ—Ä –º–µ–¥–∏–∞(—Å—Ç–∏–∫–µ—Ä/–≥–∏—Ñ/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≤–æ–π—Å/–≤–∏–¥–µ–æ–≤–æ–π—Å"""
    strings = {'name': '–ú–µ–¥–∏–∞–°–ø–∞–º'}

    def __init__(self):
        self.name = self.strings['name']
        self._me = None
        self._ratelimit = []

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        self.me = await client.get_me()

    async def mediaspamcmd(self, message):
        """.mediaspam <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> + —Ä–µ–ø–ª–∞–π –Ω–∞ –º–µ–¥–∏–∞(—Å—Ç–∏–∫–µ—Ä/–≥–∏—Ñ/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≤–æ–π—Å/–≤–∏–¥–µ–æ–≤–æ–π—Å)"""
        reply = await message.get_reply_message()
        if not reply:
            await message.edit("<code>.mediaspam <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> + —Ä–µ–ø–ª–∞–π –Ω–∞ –º–µ–¥–∏–∞(—Å—Ç–∏–∫–µ—Ä/–≥–∏—Ñ/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≤–æ–π—Å/–≤–∏–¥–µ–æ–≤–æ–π—Å</code>")
            return
        if not reply.media:
            await message.edit("<code>.mediaspam <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> + —Ä–µ–ø–ª–∞–π –Ω–∞ –º–µ–¥–∏–∞(—Å—Ç–∏–∫–µ—Ä/–≥–∏—Ñ/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≤–æ–π—Å/–≤–∏–¥–µ–æ–≤–æ–π—Å</code>")
            return
        media = reply.media
    
        args = utils.get_args(message)
        if not args:
            await message.edit("<code>.mediaspam <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> + —Ä–µ–ø–ª–∞–π –Ω–∞ –º–µ–¥–∏–∞(—Å—Ç–∏–∫–µ—Ä/–≥–∏—Ñ/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≤–æ–π—Å/–≤–∏–¥–µ–æ–≤–æ–π—Å</code>")
            return
        count = args[0]
        count = count.strip()
        if not count.isdigit():
            await message.edit("<code>.mediaspam <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> + —Ä–µ–ø–ª–∞–π –Ω–∞ –º–µ–¥–∏–∞(—Å—Ç–∏–∫–µ—Ä/–≥–∏—Ñ/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≤–æ–π—Å/–≤–∏–¥–µ–æ–≤–æ–π—Å</code>")
            return
        count = int(count)
        
        await message.delete()
        for _ in range(count):
            await message.client.send_file(message.to_id, media)
