# meta developer: @modwini

from .. import loader, utils
from asyncio import sleep
import logging
import random
from telethon import events
from telethon.tl.patched import Message
import g4f # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É g4f

logger = logging.getLogger(__name__)

@loader.tds
class Gpt4PersonaMod(loader.Module):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è Hikka, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—á–∞—Ç—å –≤ —á–∞—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã "–ö—Ä–µ–π–∫"
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö API GPT-4 —á–µ—Ä–µ–∑ g4f.
    """

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "persona_name",
                "–∫—Ä–µ–π–∫",
                lambda: self.strings("persona_name_h"),
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "history_limit",
                30,
                lambda: self.strings("history_limit_h"),
                validator=loader.validators.Integer(minimum=5, maximum=100),
            ),
            loader.ConfigValue(
                "min_delay",
                2,
                lambda: self.strings("min_delay_h"),
                validator=loader.validators.Integer(minimum=0, maximum=10),
            ),
            loader.ConfigValue(
                "max_delay",
                5,
                lambda: self.strings("max_delay_h"),
                validator=loader.validators.Integer(minimum=0, maximum=10),
            ),
        )
        self.active_chats = {}  # {chat_id: True/False} - –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
        self.client = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º client –∑–¥–µ—Å—å

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.active_chats = self.db.get("Gpt4PersonaMod", "active_chats", {})

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.client.add_event_handler(
            self.on_new_message,
            events.NewMessage(incoming=True, outgoing=False) # –°–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        )

    strings = {
        "name": "Gpt4Persona",
        "persona_name_h": "–ò–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å AI (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–µ–π–∫')",
        "history_limit_h": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ—Ç 5 –¥–æ 100).",
        "min_delay_h": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "max_delay_h": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "ii_on": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ {}.",
        "ii_off": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤—ã–∫–ª—é—á–µ–Ω.",
        "ii_deleted": "```.ii``` (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)",
        "processing": "```–¥—É–º–∞—é...```",
        "error_processing": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {}",
        "error_timeout": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "not_text": "Gpt4Persona –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "no_reply_found": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å.",
        "_cmd_doc_ii": "–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."
    }

    strings_ru = {
        "name": "Gpt4Persona",
        "persona_name_h": "–ò–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å AI (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–µ–π–∫')",
        "history_limit_h": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ—Ç 5 –¥–æ 100).",
        "min_delay_h": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "max_delay_h": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "ii_on": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ {}.",
        "ii_off": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤—ã–∫–ª—é—á–µ–Ω.",
        "ii_deleted": "```.ii``` (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)",
        "processing": "```–¥—É–º–∞—é...```",
        "error_processing": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {}",
        "error_timeout": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "not_text": "Gpt4Persona –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "no_reply_found": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å.",
        "_cmd_doc_ii": "–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."
    }

    @loader.command("ii")
    async def iicmd(self, m: Message):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."""
        chat_id = utils.get_chat_id(m)
        persona_name = self.config["persona_name"]

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π —Å—Ä–∞–∑—É
        await m.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        await utils.answer(m, self.strings("ii_deleted"))

        if self.active_chats.get(chat_id, False):
            self.active_chats[chat_id] = False
            await utils.answer(m, self.strings("ii_off"))
        else:
            self.active_chats[chat_id] = True
            await utils.answer(m, self.strings("ii_on").format(persona_name))

        self.db.set("Gpt4PersonaMod", "active_chats", self.active_chats)

    async def on_new_message(self, event):
        m = event.message

        if not m.is_private and not m.is_group:
            return

        chat_id = utils.get_chat_id(m)
        if not self.active_chats.get(chat_id, False):
            return  # –†–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ (–≤–∞—à–µ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞ Hikka)
        me = await self.client.get_me()
        if m.sender_id == me.id:
            return

        if m.text and m.text.startswith(".ii"):
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É .ii, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ç–ª–∏

        if not m.text:
            await utils.answer(m, self.strings("not_text"))
            return  # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

        persona_name = self.config["persona_name"]
        history_limit = self.config["history_limit"]
        min_delay = self.config["min_delay"]
        max_delay = self.config["max_delay"]

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            messages_for_g4f = []
            
            # –¢–µ–ª–µ–≥—Ä–∞–º API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º, –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–∞–æ–±–æ—Ä–æ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
            # –ü–æ—ç—Ç–æ–º—É —Å–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º, –ø–æ—Ç–æ–º –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º.
            fetched_messages = []
            async for msg in self.client.iter_messages(chat_id, limit=history_limit):
                if msg.text:
                    fetched_messages.append(msg)
            
            # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
            for msg in reversed(fetched_messages):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è GPT
                if msg.sender_id == me.id:
                    role = "assistant" # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—Å, —ç—Ç–æ –Ω–∞—à "–æ—Ç–≤–µ—Ç" –≤ –∏—Å—Ç–æ—Ä–∏–∏
                    content = msg.text
                else:
                    role = "user"
                    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    # sender_name = msg.sender.first_name or msg.sender.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_{msg.sender_id}"
                    # content = f"{sender_name}: {msg.text}"
                    content = msg.text # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å –º–æ–¥–µ–ª—å –∏–º–µ–Ω–∞–º–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–æ–ª–∏.

                messages_for_g4f.append({"role": role, "content": content})

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            # –≠—Ç–æ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏–∞–ª–æ–≥–µ
            user_message_text = m.text
            messages_for_g4f.append({"role": "user", "content": user_message_text})

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã
            # –í–∞–∂–Ω–æ: —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–µ—Ä–≤—ã–º
            system_prompt = (
                f"–¢—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram —Å –Ω–∏–∫–Ω–µ–π–º–æ–º {persona_name}. "
                f"–û—Ç–≤–µ—á–∞–π –∫–∞–∫ 18-–ª–µ—Ç–Ω–∏–π —á–µ–ª–æ–≤–µ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ–±–æ–ª—å—à–æ–π —Ä–µ–≥–∏—Å—Ç—Ä. "
                f"–£–ø–æ–º–∏–Ω–∞–π —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –∏ –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–±—è –æ–± —ç—Ç–æ–º —Å–ø—Ä–æ—Å—è—Ç. "
                f"–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
            )
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages_for_g4f.insert(0, {"role": "system", "content": system_prompt})

            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            delay = random.uniform(min_delay, max_delay)
            await sleep(delay) # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.sleep

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–¥—É–º–∞—é..." —Å–æ–æ–±—â–µ–Ω–∏–µ
            thinking_message = await utils.answer(m, self.strings("processing"))

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ g4f (GPT-4)
                # g4f.debug.logging = True # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                # g4f.check_version = False # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏

                response = g4f.ChatCompletion.create(
                    model="gpt-4", # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å gpt-4
                    messages=messages_for_g4f,
                    stream=False, # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    timeout=60 # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                )

                if response:
                    response_text = response
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é..." –Ω–∞ –æ—Ç–≤–µ—Ç –æ—Ç AI
                    await utils.answer(thinking_message, response_text)
                else:
                    await utils.answer(thinking_message, self.strings("no_reply_found"))

            except Exception as e:
                logger.error(f"Error getting response from g4f: {e}", exc_info=True)
                await utils.answer(thinking_message, self.strings("error_processing").format(e))

        except Exception as e:
            logger.error(f"Error in Gpt4PersonaMod listener: {e}", exc_info=True)
            await utils.answer(m, self.strings("error_processing").format(e))
