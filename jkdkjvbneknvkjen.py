# meta developer: @modwini
import asyncio
import random
import logging
from hikka import loader, utils
from telethon import events
from telethon.tl.patched import Message

import g4f

logger = logging.getLogger(__name__)

@loader.tds
class Gpt4PersonaMod(loader.Module):
    """AI-–ø–µ—Ä—Å–æ–Ω–∞ '–ö—Ä–µ–π–∫' —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏."""

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue("persona_name", "–∫—Ä–µ–π–∫", lambda: "–ò–º—è AI-–ø–µ—Ä—Å–æ–Ω—ã"),
            loader.ConfigValue("history_limit", 30, lambda: "–°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏", validator=loader.validators.Integer(5, 100)),
            loader.ConfigValue("min_delay", 1, lambda: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º", validator=loader.validators.Integer(0, 5)),
            loader.ConfigValue("max_delay", 2, lambda: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º", validator=loader.validators.Integer(0, 5)),
            loader.ConfigValue("g4f_model", "gpt-3.5-turbo", lambda: "–ú–æ–¥–µ–ª—å g4f (–Ω–∞–ø—Ä–∏–º–µ—Ä, gpt-4)", validator=loader.validators.String())
        )
        self.active_chats = {}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.active_chats = self.db.get("Gpt4PersonaMod", "active_chats", {})
        self.client.add_event_handler(self.on_new_message, events.NewMessage(incoming=True, outgoing=False))

    strings = {
        "name": "Gpt4Persona",
        "ii_on": "üü¢ –ö—Ä–µ–π–∫ –∞–∫—Ç–∏–≤–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
        "ii_off": "üî¥ –ö—Ä–µ–π–∫ –æ—Ç–∫–ª—é—á—ë–Ω.",
        "ii_deleted": "```.ii``` (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)",
        "error_processing": "‚ùå –û—à–∏–±–∫–∞: {}",
        "error_timeout": "‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è AI –∏—Å—Ç–µ–∫–ª–æ.",
        "no_history": "‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. –û—Ç–≤–µ—á–∞—é –±–µ–∑ –Ω–µ—ë.",
        "_cmd_doc_ii": "–í–∫–ª/–≤—ã–∫–ª –æ—Ç–≤–µ—Ç—ã –ö—Ä–µ–π–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
    }

    @loader.command("ii")
    async def iicmd(self, m: Message):
        chat_id = utils.get_chat_id(m)
        await m.delete()
        if self.active_chats.get(chat_id):
            self.active_chats[chat_id] = False
            await utils.answer(m, self.strings("ii_off"))
        else:
            self.active_chats[chat_id] = True
            await utils.answer(m, self.strings("ii_on"))
        self.db.set("Gpt4PersonaMod", "active_chats", self.active_chats)

    async def on_new_message(self, event):
        m = event.message
        chat_id = utils.get_chat_id(m)
        if not self.active_chats.get(chat_id, False): return
        if not m.text: return
        me = await self.client.get_me()
        if m.sender_id == me.id: return
        if m.text.lower().startswith(".ii"): return

        persona_name = self.config["persona_name"]
        model = self.config["g4f_model"]
        limit = self.config["history_limit"]
        min_d = self.config["min_delay"]
        max_d = self.config["max_delay"]

        # –ó–∞–¥–µ—Ä–∂–∫–∞, –∫–∞–∫ –±—É–¥—Ç–æ —á–µ–ª–æ–≤–µ–∫ –ø–µ—á–∞—Ç–∞–µ—Ç
        await asyncio.sleep(random.uniform(min_d, max_d))

        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        history_messages = []
        try:
            async for msg in self.client.iter_messages(chat_id, limit=limit):
                if msg.text:
                    sender = await msg.get_sender()
                    name = sender.first_name or sender.username or f"User_{msg.sender_id}"
                    if msg.sender_id == me.id:
                        name = persona_name
                    history_messages.append(f"{name}: {msg.text}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}", exc_info=True)
            await utils.answer(m, self.strings("no_history"))

        history_text = "\n".join(reversed(history_messages)) if history_messages else ""

        prompt = (
            f"{history_text}\n\n\n"
            f"—Ç—ã ‚Äî {persona_name}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–æ—Ç–æ—Ä–æ–º—É 18 –ª–µ—Ç "
            f"(—É–ø–æ–º–∏–Ω–∞–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø—Ä–æ—Å—è—Ç). "
            f"–æ—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–∞ –≤–æ–ø—Ä–æ—Å: {m.text}"
        )

        try:
            response = g4f.ChatCompletion.create(
                model=model,
                messages=[{"role": "user", "content": prompt}],
                stream=False,
                timeout=30
            )
            await utils.answer(m, response)

        except asyncio.TimeoutError:
            await utils.answer(m, self.strings("error_timeout"))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ g4f: {e}", exc_info=True)
            await utils.answer(m, self.strings("error_processing").format(str(e)))
