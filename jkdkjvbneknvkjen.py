# meta developer: @modwini
import asyncio
import random
import logging
from hikka import loader, utils
from telethon import events
from telethon.tl.patched import Message
import g4f

logger = logging.getLogger(__name__)

@loader.tds
class Gpt4PersonaMod(loader.Module):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è Hikka, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—á–∞—Ç—å –≤ —á–∞—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã "–ö—Ä–µ–π–∫"
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º G4F (GPT-4).
    """

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "persona_name",
                "–∫—Ä–µ–π–∫",
                lambda: self.strings("persona_name_h"),
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "history_limit",
                30,
                lambda: self.strings("history_limit_h"),
                validator=loader.validators.Integer(minimum=5, maximum=100),
            ),
            loader.ConfigValue(
                "min_delay",
                2,
                lambda: self.strings("min_delay_h"),
                validator=loader.validators.Integer(minimum=0, maximum=10),
            ),
            loader.ConfigValue(
                "max_delay",
                5,
                lambda: self.strings("max_delay_h"),
                validator=loader.validators.Integer(minimum=0, maximum=10),
            ),
            loader.ConfigValue(
                "model_name",
                "gpt-4",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º gpt-4 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫–∞–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–æ—Å—å
                lambda: self.strings("model_name_h"),
                validator=loader.validators.String(),
            )
        )
        self.active_chats = {}  # {chat_id: True/False} - –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.active_chats = self.db.get("Gpt4PersonaMod", "active_chats", {})

        self.client.add_event_handler(
            self.on_new_message,
            events.NewMessage(incoming=True, outgoing=False)
        )

    strings = {
        "name": "Gpt4Persona",
        "persona_name_h": "–ò–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å AI (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–µ–π–∫')",
        "history_limit_h": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ—Ç 5 –¥–æ 100).",
        "min_delay_h": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "max_delay_h": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "model_name_h": "–ò–º—è –º–æ–¥–µ–ª–∏ G4F –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'gpt-4', 'gpt-3.5-turbo').",
        "ii_on": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ {}.",
        "ii_off": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤—ã–∫–ª—é—á–µ–Ω.",
        "ii_deleted": "`‚è≥ .ii` (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)",
        "processing": "```–¥—É–º–∞—é...```",
        "error_processing": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {}",
        "error_timeout": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "not_text": "Gpt4Persona –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "_cmd_doc_ii": "–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."
    }

    strings_ru = {
        "name": "Gpt4Persona",
        "persona_name_h": "–ò–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å AI (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–µ–π–∫')",
        "history_limit_h": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ—Ç 5 –¥–æ 100).",
        "min_delay_h": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "max_delay_h": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "model_name_h": "–ò–º—è –º–æ–¥–µ–ª–∏ G4F –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'gpt-4', 'gpt-3.5-turbo').",
        "ii_on": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ {}.",
        "ii_off": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤—ã–∫–ª—é—á–µ–Ω.",
        "ii_deleted": "`‚è≥ .ii` (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)",
        "processing": "```–¥—É–º–∞—é...```",
        "error_processing": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {}",
        "error_timeout": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "not_text": "Gpt4Persona –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "_cmd_doc_ii": "–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."
    }

    @loader.command("ii")
    async def iicmd(self, m: Message):
        """Toggle Gpt4 persona for current chat."""
        chat_id = utils.get_chat_id(m)
        persona_name = self.config["persona_name"]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –î–û —É–¥–∞–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å MessageIdInvalidError
        status_message = await utils.answer(m, self.strings("ii_deleted"))
        # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await m.delete()

        if self.active_chats.get(chat_id, False):
            self.active_chats[chat_id] = False
            await utils.answer(status_message, self.strings("ii_off"))
        else:
            self.active_chats[chat_id] = True
            await utils.answer(status_message, self.strings("ii_on").format(persona_name))

        self.db.set("Gpt4PersonaMod", "active_chats", self.active_chats)

    async def on_new_message(self, event):
        m = event.message

        if not m.is_private and not m.is_group:
            return

        chat_id = utils.get_chat_id(m)
        if not self.active_chats.get(chat_id, False):
            return  # –†–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ

        me = await self.client.get_me()
        if m.sender_id == me.id:
            return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã .ii
        if not m.text:
            return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if m.text and m.text.startswith(self.get_prefix() + "ii"): # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_prefix() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã
            return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É .ii, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ç–ª–∏

        persona_name = self.config["persona_name"]
        history_limit = self.config["history_limit"]
        min_delay = self.config["min_delay"]
        max_delay = self.config["max_delay"]
        model_name = self.config["model_name"]

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            history_messages_list = []
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º reversed() –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
            async for msg in self.client.iter_messages(chat_id, limit=history_limit):
                if msg.text: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å AttributeError
                    sender_entity = await msg.get_sender() # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    if sender_entity:
                        sender_name = persona_name if msg.sender_id == me.id else (sender_entity.first_name or sender_entity.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_{msg.sender_id}")
                        history_messages_list.append(f"{sender_name}: {msg.text}")
                    else:
                        # –ï—Å–ª–∏ sender_entity None (—Ä–µ–¥–∫–æ, –Ω–æ –±—ã–≤–∞–µ—Ç), –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
                        sender_name = persona_name if msg.sender_id == me.id else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_{msg.sender_id}"
                        history_messages_list.append(f"{sender_name}: {msg.text}")

            # G4F –æ–∂–∏–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            messages_for_g4f = []
            for item in history_messages_list:
                if item.startswith(f"{persona_name}:"):
                    messages_for_g4f.append({"role": "assistant", "content": item.replace(f"{persona_name}: ", "")})
                else:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    parts = item.split(": ", 1)
                    if len(parts) == 2:
                        user_name = parts[0]
                        user_content = parts[1]
                        messages_for_g4f.append({"role": "user", "content": f"{user_name}: {user_content}"})
                    else:
                        messages_for_g4f.append({"role": "user", "content": item}) # Fallback

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏
            current_sender_entity = await m.get_sender()
            current_sender_name = current_sender_entity.first_name or current_sender_entity.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_{m.sender_id}"
            messages_for_g4f.append({"role": "user", "content": f"{current_sender_name}: {m.text}"})

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã
            messages_for_g4f.insert(0, {
                "role": "system",
                "content": f"–¢—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ª–µ–≥—Ä–∞–º —Å –Ω–∏–∫–Ω–µ–π–º–æ–º {persona_name}. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ 18-–ª–µ—Ç–Ω–∏–π —á–µ–ª–æ–≤–µ–∫, "
                           f"–ø–∏—à–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã. –£–ø–æ–º–∏–Ω–∞–π –Ω–∏–∫–Ω–µ–π–º –∏ –≤–æ–∑—Ä–∞—Å—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–±—è –æ–± —ç—Ç–æ–º —Å–ø—Ä–æ—Å—è—Ç. "
                           f"–ö–æ—Ä–æ—Ç–∫–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –≤ –¥–∏–∞–ª–æ–≥–µ, —Å–æ–±–ª—é–¥–∞—è —Å—Ç–∏–ª—å."
            })
            
            delay = random.uniform(min_delay, max_delay)
            await asyncio.sleep(delay)

            thinking_message = await utils.answer(m, self.strings("processing"))

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ G4F
                response = ""
                # G4F.ChatCompletion.create –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –µ—Å–ª–∏ stream=True.
                # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥, –æ–Ω–∞ –≤–µ—Ä–Ω–µ—Ç —Å—Ä–∞–∑—É —Å—Ç—Ä–æ–∫—É.
                # –ü–æ—ç—Ç–æ–º—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Å–ª—É—á–∞—è.
                g4f_response = g4f.ChatCompletion.create(
                    model=model_name,
                    messages=messages_for_g4f,
                    stream=True, # –ü–æ–ø—Ä–æ–±—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
                    # proxy="http://host:port", # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞
                    # timeout=60 # –¢–∞–π–º–∞—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 120, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
                )
                
                if isinstance(g4f_response, str):
                    response = g4f_response
                else:
                    for message_chunk in g4f_response:
                        response += message_chunk
                        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        # await asyncio.sleep(0.05) 
                        # await utils.answer(thinking_message, response) # –û–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∏—è

                await utils.answer(thinking_message, response)

            except Exception as e:
                logger.error(f"Error getting response from G4F: {e}", exc_info=True)
                if "Model not found" in str(e):
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ."
                elif "timeout" in str(e).lower():
                    error_msg = self.strings("error_timeout")
                else:
                    error_msg = self.strings("error_processing").format(e)
                await utils.answer(thinking_message, error_msg)

        except Exception as e:
            logger.error(f"Error in Gpt4PersonaMod listener: {e}", exc_info=True)
            await utils.answer(m, self.strings("error_processing").format(e))
