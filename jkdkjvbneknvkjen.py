# meta developer: @modwini
#
# –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ª–∏—Ü–∞ AI-–ø–µ—Ä—Å–æ–Ω—ã
# —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º g4f (GPT-4 Free).
# –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å.

import asyncio
import random
import logging
import g4f

from hikka import loader, utils
from telethon import events
from telethon.tl.patched import Message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è g4f, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å
g4f.debug.logging = False

logger = logging.getLogger(__name__)

@loader.tds
class Gpt4PersonaMod(loader.Module):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –≤ —á–∞—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—è g4f (gpt4free).
    """

    strings = {
        "name": "Gpt4Persona",
        "persona_name_h": "–ò–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å AI (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–µ–π–∫').",
        "history_limit_h": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (5-100).",
        "min_delay_h": "–ú–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI (—Å–µ–∫).",
        "max_delay_h": "–ú–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI (—Å–µ–∫).",
        "model_h": "–ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: g4f.models.gpt_4, g4f.models.gpt_3_5_turbo.",
        "ii_on": "üé≠ <b>–†–µ–∂–∏–º Gpt4Persona –≤–∫–ª—é—á–µ–Ω.</b>\n–¢–µ–ø–µ—Ä—å —è –æ—Ç–≤–µ—á–∞—é –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∫–∞–∫ <code>{}</code>.",
        "ii_off": "üé≠ <b>–†–µ–∂–∏–º Gpt4Persona –≤—ã–∫–ª—é—á–µ–Ω.</b>",
        "processing": "<code>ü§î –¥—É–º–∞—é...</code>",
        "error_processing": "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n<code>{}</code>",
        "history_error": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞, –æ—Ç–≤–µ—á–∞—é –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.",
        "not_text": "üëÄ –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "_cmd_doc_ii": "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ.",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "persona_name",
                "–∫—Ä–µ–π–∫",
                lambda: self.strings("persona_name_h"),
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "model",
                "gpt-4",
                lambda: self.strings("model_h"),
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "history_limit",
                25,
                lambda: self.strings("history_limit_h"),
                validator=loader.validators.Integer(minimum=5, maximum=100),
            ),
            loader.ConfigValue(
                "min_delay",
                2,
                lambda: self.strings("min_delay_h"),
                validator=loader.validators.Integer(minimum=0, maximum=10),
            ),
            loader.ConfigValue(
                "max_delay",
                5,
                lambda: self.strings("max_delay_h"),
                validator=loader.validators.Integer(minimum=0, maximum=10),
            ),
        )
        self.active_chats = {}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.me = await client.get_me()
        self.active_chats = self.db.get("Gpt4PersonaMod", "active_chats", {})
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.client.add_event_handler(
            self.on_new_message,
            events.NewMessage(incoming=True, outgoing=False)
        )

    @loader.command()
    async def ii(self, m: Message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI."""
        chat_id = utils.get_chat_id(m)
        
        if self.active_chats.get(chat_id, False):
            self.active_chats[chat_id] = False
            await utils.answer(m, self.strings("ii_off"))
        else:
            self.active_chats[chat_id] = True
            persona_name = self.config["persona_name"]
            await utils.answer(m, self.strings("ii_on").format(persona_name))

        self.db.set("Gpt4PersonaMod", "active_chats", self.active_chats)

    async def on_new_message(self, event: events.NewMessage.Event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        m = event.message
        chat_id = utils.get_chat_id(m)

        # --- –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è ---
        if not self.active_chats.get(chat_id, False):
            return

        if m.sender_id == self.me.id:
            return

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        if not m.text or m.text.startswith(self.get_prefix()):
            return
            
        persona_name = self.config["persona_name"]
        history_limit = self.config["history_limit"]
        
        history_string = ""
        # --- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ---
        try:
            history_messages = []
            async for historic_msg in self.client.iter_messages(chat_id, limit=history_limit):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
                if historic_msg and historic_msg.text:
                    sender = await historic_msg.get_sender()
                    sender_name = persona_name if historic_msg.out else (
                        sender.first_name or sender.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_{sender.id}"
                    )
                    history_messages.append(f"{sender_name}: {historic_msg.text}")
            
            # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            history_string = "\n".join(reversed(history_messages))
        except Exception as e:
            logger.error(f"Failed to get chat history: {e}")
            await self.client.send_message(chat_id, self.strings("history_error"))
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏

        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI ---
        prompt = (
            f"–¢—ã - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram —Å –Ω–∏–∫–æ–º '{persona_name}'. –¢–µ–±–µ 18 –ª–µ—Ç. "
            f"–¢—ã –æ–±—â–∞–µ—à—å—Å—è –≤ —á–∞—Ç–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∫–æ—Ä–æ—Ç–∫–æ –∏ —ë–º–∫–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "
            f"—Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞. –û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã. "
            f"–ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ë—É–¥—å –Ω–µ–º–Ω–æ–≥–æ –¥–µ—Ä–∑–∫–∏–º –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–µ–Ω—å."
            f"\n\n--- –ö–û–ù–¢–ï–ö–°–¢ –î–ò–ê–õ–û–ì–ê ---\n{history_string}\n\n"
            f"--- –ü–û–°–õ–ï–î–ù–ï–ï –°–û–û–ë–©–ï–ù–ò–ï, –ù–ê –ö–û–¢–û–†–û–ï –ù–ê–î–û –û–¢–í–ï–¢–ò–¢–¨ ---\n"
            f"{m.sender.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}: {m.text}"
        )

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---
        try:
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            delay = random.uniform(self.config["min_delay"], self.config["max_delay"])
            await asyncio.sleep(delay)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é..." –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            thinking_message = await utils.answer(m, self.strings("processing"))

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ g4f
            response_text = await g4f.ChatCompletion.create_async(
                model=self.config["model"],
                messages=[{"role": "user", "content": prompt}],
                # provider=g4f.Provider.GeekGpt  # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            )
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é..." –Ω–∞ –æ—Ç–≤–µ—Ç –æ—Ç AI
            if response_text:
                await utils.answer(thinking_message, response_text)
            else:
                await utils.answer(thinking_message, self.strings("error_processing").format("AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."))

        except Exception as e:
            logger.error(f"Error processing g4f request: {e}", exc_info=True)
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º "–¥—É–º–∞—é..." –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if 'thinking_message' in locals():
                await utils.answer(thinking_message, self.strings("error_processing").format(e))
            else:
                await utils.answer(m, self.strings("error_processing").format(e))
