# meta developer: @modwini
from .. import loader, utils
import logging
import asyncio
import random
from telethon import events
from telethon.tl.patched import Message
import g4f

logger = logging.getLogger(__name__)

@loader.tds
class Gpt4PersonaMod(loader.Module):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è Hikka, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—á–∞—Ç—å –≤ —á–∞—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º g4f (GPT-3.5-turbo –∏–ª–∏ GPT-4).
    """

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "g4f_model",
                "gpt-3.5-turbo",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º gpt-3.5-turbo –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ gpt-4
                lambda: self.strings("g4f_model_h"),
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "persona_name",
                "–∫—Ä–µ–π–∫",
                lambda: self.strings("persona_name_h"),
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "history_limit",
                10, # –£–º–µ–Ω—å—à–∏–ª –ª–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è g4f, —Ç.–∫. –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–ø—Ä–∏–∑–Ω—ã.
                    # –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 20-30, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ.
                lambda: self.strings("history_limit_h"),
                validator=loader.validators.Integer(minimum=2, maximum=50),
            ),
            loader.ConfigValue(
                "min_delay",
                1, # –£–º–µ–Ω—å—à–∏–ª –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                lambda: self.strings("min_delay_h"),
                validator=loader.validators.Integer(minimum=0, maximum=10),
            ),
            loader.ConfigValue(
                "max_delay",
                3, # –£–º–µ–Ω—å—à–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                lambda: self.strings("max_delay_h"),
                validator=loader.validators.Integer(minimum=0, maximum=10),
            ),
        )
        self.active_chats = {}  # {chat_id: True/False} - –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.active_chats = self.db.get("Gpt4PersonaMod", "active_chats", {})

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.client.add_event_handler(
            self.on_new_message,
            events.NewMessage(incoming=True, outgoing=False) # –°–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        )

    strings = {
        "name": "Gpt4Persona",
        "g4f_model_h": "–ú–æ–¥–µ–ª—å g4f –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'gpt-3.5-turbo' –∏–ª–∏ 'gpt-4').",
        "persona_name_h": "–ò–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å AI (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–µ–π–∫').",
        "history_limit_h": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ—Ç 2 –¥–æ 50).",
        "min_delay_h": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "max_delay_h": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "ii_on": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ {}.",
        "ii_off": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤—ã–∫–ª—é—á–µ–Ω.",
        "ii_deleted": "```.ii``` (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)",
        "processing": "```–¥—É–º–∞—é...```",
        "error_config": "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–æ–¥–µ–ª—å g4f –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.config Gpt4Persona` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        "error_processing": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {}",
        "error_timeout": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "not_text": "Gpt4Persona –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "_cmd_doc_ii": "–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."
    }

    strings_ru = {
        "name": "Gpt4Persona",
        "g4f_model_h": "–ú–æ–¥–µ–ª—å g4f –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'gpt-3.5-turbo' –∏–ª–∏ 'gpt-4').",
        "persona_name_h": "–ò–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å AI (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–µ–π–∫').",
        "history_limit_h": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ—Ç 2 –¥–æ 50).",
        "min_delay_h": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "max_delay_h": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "ii_on": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ {}.",
        "ii_off": "üé≠ –†–µ–∂–∏–º Gpt4Persona –≤—ã–∫–ª—é—á–µ–Ω.",
        "ii_deleted": "```.ii``` (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)",
        "processing": "```–¥—É–º–∞—é...```",
        "error_config": "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–æ–¥–µ–ª—å g4f –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.config Gpt4Persona` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        "error_processing": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {}",
        "error_timeout": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "not_text": "Gpt4Persona –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "_cmd_doc_ii": "–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."
    }

    @loader.command("ii")
    async def iicmd(self, m: Message):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."""
        chat_id = utils.get_chat_id(m)
        persona_name = self.config["persona_name"]

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        await m.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º m.respond, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–µ.
        if self.active_chats.get(chat_id, False):
            self.active_chats[chat_id] = False
            await m.respond(self.strings("ii_off"))
        else:
            self.active_chats[chat_id] = True
            await m.respond(self.strings("ii_on").format(persona_name))

        self.db.set("Gpt4PersonaMod", "active_chats", self.active_chats)

    async def on_new_message(self, event):
        m: Message = event.message # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Message –∏–∑ event

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞ Hikka
        me = await self.client.get_me()
        if m.sender_id == me.id:
            return

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π .ii
        if not m.text or m.text.lower().startswith(".ii"):
            if not m.text: # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
                # –û—Ç–≤–µ—á–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –∏ —ç—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã)
                if self.active_chats.get(utils.get_chat_id(m), False) and not m.voice:
                    await utils.answer(m, self.strings("not_text"))
            return

        chat_id = utils.get_chat_id(m)
        if not self.active_chats.get(chat_id, False):
            return  # –†–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ

        persona_name = self.config["persona_name"]
        history_limit = self.config["history_limit"]
        min_delay = self.config["min_delay"]
        max_delay = self.config["max_delay"]
        g4f_model = self.config["g4f_model"]

        try:
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
            delay = random.uniform(min_delay, max_delay)
            await asyncio.sleep(delay)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–¥—É–º–∞—é..." —Å–æ–æ–±—â–µ–Ω–∏–µ
            thinking_message = await utils.answer(m, self.strings("processing"))

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è g4f
            # G4f –æ–∂–∏–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {"role": "user/assistant", "content": "..."}
            messages_for_g4f = [
                {"role": "system", "content": (
                    f"–¢—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¢–µ–ª–µ–≥—Ä–∞–º —Å –Ω–∏–∫–Ω–µ–π–º–æ–º {persona_name}. "
                    f"–û—Ç–≤–µ—á–∞–π –∫–∞–∫ 18-–ª–µ—Ç–Ω–∏–π —á–µ–ª–æ–≤–µ–∫, –ø–∏—à–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã. "
                    f"–£–ø–æ–º–∏–Ω–∞–π —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –∏ –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–±—è –æ–± —ç—Ç–æ–º –ø–æ–ø—Ä–æ—Å—è—Ç. "
                    f"–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ."
                )},
            ]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 'm' –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
            # Telethon.iter_messages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º, –ø–æ—ç—Ç–æ–º—É –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            history_list = []
            async for historic_msg in self.client.iter_messages(chat_id, limit=history_limit):
                if historic_msg.id == m.id: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    continue
                if historic_msg.text:
                    history_list.append(historic_msg)
            
            for historic_msg in reversed(history_list): # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                if historic_msg.sender_id == me.id:
                    role = "assistant" # –í–∞—à–∏ –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"
                else:
                    role = "user" # –°–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                messages_for_g4f.append({"role": role, "content": historic_msg.text})
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å
            messages_for_g4f.append({"role": "user", "content": m.text})

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ g4f
                response = g4f.ChatCompletion.create(
                    model=g4f_model,
                    messages=messages_for_g4f,
                    stream=False, # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É
                    timeout=30 # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                )
                response_text = response

                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é..." –Ω–∞ –æ—Ç–≤–µ—Ç –æ—Ç AI
                await utils.answer(thinking_message, response_text)

            except asyncio.TimeoutError:
                await utils.answer(thinking_message, self.strings("error_timeout"))
            except g4f.errors.ModelNotProvided:
                logger.error(f"G4F Error: Model not provided or invalid for model '{g4f_model}'")
                await utils.answer(thinking_message, self.strings("error_config"))
            except Exception as e:
                logger.error(f"Error getting response from g4f: {e}", exc_info=True)
                await utils.answer(thinking_message, self.strings("error_processing").format(e))

        except Exception as e:
            logger.error(f"Error in Gpt4PersonaMod listener: {e}", exc_info=True)
            await utils.answer(m, self.strings("error_processing").format(e))
