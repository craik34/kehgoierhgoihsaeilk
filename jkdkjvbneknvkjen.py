# meta developer: @modwini

__pip_deps__ = ["g4f"]

import asyncio
import random
import logging
import g4f # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç g4f

from telethon import events
from telethon.tl.patched import Message
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class G4fPersonaMod(loader.Module):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è Hikka, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—á–∞—Ç—å –≤ —á–∞—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º g4f (GPT4Free) –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GPT-3.5/GPT-4.
    """

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "ai_model",
                "gpt-4", # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ gpt-4 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                lambda: self.strings("ai_model_h"),
                validator=loader.validators.String(),
            ),
            # –£–±—Ä–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä ai_provider, —Ç.–∫. —Ç–µ–ø–µ—Ä—å –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –∞–≤—Ç–æ–≤—ã–±–æ—Ä g4f
            loader.ConfigValue(
                "persona_name",
                "–∫—Ä–µ–π–∫",
                lambda: self.strings("persona_name_h"),
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "persona_instructions",
                (
                    "–¢—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —Å –Ω–∏–∫–Ω–µ–π–º–æ–º '{persona_name}'. "
                    "–¢–µ–±–µ 18 –ª–µ—Ç. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ 18-–ª–µ—Ç–Ω–∏–π —á–µ–ª–æ–≤–µ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã. "
                    "–£–ø–æ–º–∏–Ω–∞–π —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –∏ –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–±—è –æ–± —ç—Ç–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–ø—Ä–æ—Å—è—Ç. "
                    "–ë—É–¥—å –∫—Ä–∞—Ç–æ–∫ –≤ –æ—Ç–≤–µ—Ç–∞—Ö."
                ),
                lambda: self.strings("persona_instructions_h"),
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "history_limit",
                30,
                lambda: self.strings("history_limit_h"),
                validator=loader.validators.Integer(minimum=5, maximum=100),
            ),
            loader.ConfigValue(
                "min_delay",
                2,
                lambda: self.strings("min_delay_h"),
                validator=loader.validators.Integer(minimum=0, maximum=10),
            ),
            loader.ConfigValue(
                "max_delay",
                5,
                lambda: self.strings("max_delay_h"),
                validator=loader.validators.Integer(minimum=0, maximum=10),
            ),
            loader.ConfigValue(
                "ai_timeout",
                90, # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è GPT-4, —Ç.–∫. –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ
                lambda: self.strings("ai_timeout_h"),
                validator=loader.validators.Integer(minimum=10, maximum=300),
            ),
        )
        self.active_chats = {}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.active_chats = self.db.get("G4fPersonaMod", "active_chats", {})

        self.client.add_event_handler(
            self.on_new_message,
            events.NewMessage(incoming=True, outgoing=False)
        )
        
        # g4f.debug.logging = True # –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã

    strings = {
        "name": "G4fPersona",
        "ai_model_h": "–ú–æ–¥–µ–ª—å AI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'gpt-4'). –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞ —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã.",
        "persona_name_h": "–ò–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å AI (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–µ–π–∫')",
        "persona_instructions_h": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è AI –ø–æ –æ—Ç–≤–µ—Ç–∞–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {persona_name} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏.",
        "history_limit_h": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ—Ç 5 –¥–æ 100).",
        "min_delay_h": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "max_delay_h": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "ai_timeout_h": "–¢–∞–π–º–∞—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ AI. –£–≤–µ–ª–∏—á—å—Ç–µ, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–µ.",
        "ii_on": "üé≠ –†–µ–∂–∏–º G4fPersona –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ {}.",
        "ii_off": "üé≠ –†–µ–∂–∏–º G4fPersona –≤—ã–∫–ª—é—á–µ–Ω.",
        "ii_deleted_confirm": "```–ö–æ–º–∞–Ω–¥–∞ .ii —É–¥–∞–ª–µ–Ω–∞.```",
        # "processing": "```–¥—É–º–∞—é...```", # –£–±—Ä–∞–Ω–æ
        "error_processing": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {}",
        "error_model_not_found": "‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å '{ai_model}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —É –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        "error_timeout": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è ({} —Å–µ–∫.). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "not_text": "G4fPersona –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
    }

    strings_ru = {
        "name": "G4fPersona",
        "ai_model_h": "–ú–æ–¥–µ–ª—å AI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'gpt-4'). –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞ —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã.",
        "persona_name_h": "–ò–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å AI (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–µ–π–∫')",
        "persona_instructions_h": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è AI –ø–æ –æ—Ç–≤–µ—Ç–∞–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {persona_name} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏.",
        "history_limit_h": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ—Ç 5 –¥–æ 100).",
        "min_delay_h": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "max_delay_h": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "ai_timeout_h": "–¢–∞–π–º–∞—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ AI. –£–≤–µ–ª–∏—á—å—Ç–µ, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–µ.",
        "ii_on": "üé≠ –†–µ–∂–∏–º G4fPersona –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ {}.",
        "ii_off": "üé≠ –†–µ–∂–∏–º G4fPersona –≤—ã–∫–ª—é—á–µ–Ω.",
        "ii_deleted_confirm": "```–ö–æ–º–∞–Ω–¥–∞ .ii —É–¥–∞–ª–µ–Ω–∞.```",
        # "processing": "```–¥—É–º–∞—é...```", # –£–±—Ä–∞–Ω–æ
        "error_processing": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {}",
        "error_model_not_found": "‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å '{ai_model}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —É –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        "error_timeout": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è ({} —Å–µ–∫.). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "not_text": "G4fPersona –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
    }

    @loader.command("ii")
    async def iicmd(self, m: Message):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."""
        chat_id = utils.get_chat_id(m)
        persona_name = self.config["persona_name"]

        await m.delete()
        
        temp_confirm_message = await m.client.send_message(chat_id, self.strings("ii_deleted_confirm"))
        await asyncio.sleep(2) 
        await temp_confirm_message.delete()


        if self.active_chats.get(chat_id, False):
            self.active_chats[chat_id] = False
            await utils.answer(m, self.strings("ii_off"))
        else:
            self.active_chats[chat_id] = True
            await utils.answer(m, self.strings("ii_on").format(persona_name))

        self.db.set("G4fPersonaMod", "active_chats", self.active_chats)

    async def on_new_message(self, event):
        m = event.message

        if not m.is_private and not m.is_group:
            return

        chat_id = utils.get_chat_id(m)
        if not self.active_chats.get(chat_id, False):
            return

        me = await self.client.get_me()
        if m.sender_id == me.id:
            return

        if m.text and m.text.startswith(".ii"):
            return

        if not m.text:
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –±–µ–∑ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ AI
            await utils.answer(m, self.strings("not_text"))
            return

        persona_name = self.config["persona_name"]
        persona_instructions = self.config["persona_instructions"].format(persona_name=persona_name)
        history_limit = self.config["history_limit"]
        min_delay = self.config["min_delay"]
        max_delay = self.config["max_delay"]
        ai_model = self.config["ai_model"]
        ai_timeout = self.config["ai_timeout"]

        try:
            chat_messages = []
            me_id = me.id

            messages_to_process = []
            async for msg in self.client.iter_messages(chat_id, limit=history_limit):
                if msg.text:
                    messages_to_process.append(msg)
            
            for msg in reversed(messages_to_process):
                role = "assistant" if msg.sender_id == me_id else "user"
                chat_messages.append({"role": role, "content": msg.text})
            
            messages_for_ai = [
                {"role": "system", "content": persona_instructions}
            ] + chat_messages

            messages_for_ai.append({"role": "user", "content": m.text})

            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ AI
            delay = random.uniform(min_delay, max_delay)
            await asyncio.sleep(delay)

            full_response_text = ""
            try:
                response_generator = g4f.ChatCompletion.create_async(
                    model=ai_model,
                    messages=messages_for_ai,
                    # provider=None - g4f –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                    stream=True,
                    timeout=ai_timeout
                )
                
                async for chunk in response_generator:
                    if chunk:
                        full_response_text += chunk
                
                if full_response_text:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É, –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "–¥—É–º–∞—é..."
                    await m.reply(full_response_text) # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                else:
                    logger.warning(f"G4fPersonaMod: Received empty response for model {ai_model}")
                    await m.reply(self.strings("error_processing").format("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI."))

            except g4f.errors.ModelNotFoundError:
                logger.error(f"G4fPersonaMod: ModelNotFound error for model: {ai_model}")
                await m.reply(self.strings("error_model_not_found").format(ai_model=ai_model))
            except asyncio.TimeoutError:
                logger.error(f"G4fPersonaMod: Timeout error for model: {ai_model}")
                await m.reply(self.strings("error_timeout").format(ai_timeout))
            except Exception as e:
                logger.error(f"G4fPersonaMod: General error getting response from g4f: {e}", exc_info=True)
                await m.reply(self.strings("error_processing").format(e))

        except Exception as e:
            logger.error(f"G4fPersonaMod: Error in listener main block: {e}", exc_info=True)
            await m.reply(self.strings("error_processing").format(e))
