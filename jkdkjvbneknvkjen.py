# meta developer: @modwini

import asyncio
import random
import logging
from hikka import loader, utils
from telethon import events
from telethon.tl.patched import Message

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ g4f
import g4f

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è g4f
# g4f.debug.logging = True
# g4f.check_version = False # –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä—Å–∏–∏ g4f

logger = logging.getLogger(__name__)

@loader.tds
class Gpt4PersonaMod(loader.Module): # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    """
    –ú–æ–¥—É–ª—å –¥–ª—è Hikka, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—á–∞—Ç—å –≤ —á–∞—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPT4Free (g4f).
    """

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "persona_name",
                "–∫—Ä–µ–π–∫",
                lambda: self.strings("persona_name_h"),
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "history_limit",
                30,
                lambda: self.strings("history_limit_h"),
                validator=loader.validators.Integer(minimum=5, maximum=100),
            ),
            loader.ConfigValue(
                "min_delay",
                2,
                lambda: self.strings("min_delay_h"),
                validator=loader.validators.Integer(minimum=0, maximum=10),
            ),
            loader.ConfigValue(
                "max_delay",
                5,
                lambda: self.strings("max_delay_h"),
                validator=loader.validators.Integer(minimum=0, maximum=10),
            ),
            loader.ConfigValue(
                "ai_model",
                "gpt-4", # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º 'gpt-4' –∫–∞–∫ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
                lambda: self.strings("ai_model_h"),
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "ai_timeout",
                45, # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç, —Ç–∞–∫ –∫–∞–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º–∏
                lambda: self.strings("ai_timeout_h"),
                validator=loader.validators.Integer(minimum=10, maximum=120),
            ),
        )
        self.active_chats = {}  # {chat_id: True/False} - –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.active_chats = self.db.get("Gpt4PersonaMod", "active_chats", {})

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.client.add_event_handler(
            self.on_new_message,
            events.NewMessage(incoming=True, outgoing=False) # –°–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        )

    strings = {
        "name": "GPT4Persona", # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
        "persona_name_h": "–ò–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å AI (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–µ–π–∫')",
        "history_limit_h": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ—Ç 5 –¥–æ 100).",
        "min_delay_h": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "max_delay_h": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "ai_model_h": "–ú–æ–¥–µ–ª—å AI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'gpt-4', 'gpt-3.5-turbo', 'default'). –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ g4f –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–µ.",
        "ai_timeout_h": "–¢–∞–π–º–∞—É—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "ii_on": "üé≠ –†–µ–∂–∏–º GPT4Persona –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ {}.",
        "ii_off": "üé≠ –†–µ–∂–∏–º GPT4Persona –≤—ã–∫–ª—é—á–µ–Ω.",
        "ii_deleted": "```.ii``` (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)",
        "processing": "```–¥—É–º–∞—é...```",
        "error_processing": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {}",
        "error_timeout": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "not_text": "GPT4Persona –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "g4f_not_working": "‚ùå G4F Error: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ ({}) –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ free-API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–∑–∂–µ.",
        "_cmd_doc_ii": "–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."
    }

    strings_ru = { # –†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫
        "name": "GPT4Persona",
        "persona_name_h": "–ò–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å AI (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–µ–π–∫')",
        "history_limit_h": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ—Ç 5 –¥–æ 100).",
        "min_delay_h": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "max_delay_h": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "ai_model_h": "–ú–æ–¥–µ–ª—å AI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'gpt-4', 'gpt-3.5-turbo', 'default'). –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ g4f –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–µ.",
        "ai_timeout_h": "–¢–∞–π–º–∞—É—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "ii_on": "üé≠ –†–µ–∂–∏–º GPT4Persona –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ {}.",
        "ii_off": "üé≠ –†–µ–∂–∏–º GPT4Persona –≤—ã–∫–ª—é—á–µ–Ω.",
        "ii_deleted": "```.ii``` (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)",
        "processing": "```–¥—É–º–∞—é...```",
        "error_processing": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {}",
        "error_timeout": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "not_text": "GPT4Persona –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "g4f_not_working": "‚ùå G4F Error: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ ({}) –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ free-API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–∑–∂–µ.",
        "_cmd_doc_ii": "–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ AI-–ø–µ—Ä—Å–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."
    }

    @loader.command("ii")
    async def iicmd(self, m: Message):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º AI-–ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."""
        chat_id = utils.get_chat_id(m)
        persona_name = self.config["persona_name"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        is_active_now = not self.active_chats.get(chat_id, False)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.active_chats[chat_id] = is_active_now
        self.db.set("Gpt4PersonaMod", "active_chats", self.active_chats)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–Ω–æ "—É–¥–∞–ª–µ–Ω–æ",
        # –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å MessageIdInvalidError.
        try:
            await m.edit(self.strings("ii_deleted"))
            await asyncio.sleep(1) # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
            await m.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        status_message = self.strings("ii_on").format(persona_name) if is_active_now else self.strings("ii_off")
        await self.client.send_message(chat_id, status_message)


    async def on_new_message(self, event):
        m = event.message # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Message –∏–∑ event

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–ª–∏ –≥—Ä—É–ø–ø
        if not m.is_private and not m.is_group:
            return

        chat_id = utils.get_chat_id(m)
        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –≤—ã—Ö–æ–¥–∏–º
        if not self.active_chats.get(chat_id, False):
            return

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞ (–≤–ª–∞–¥–µ–ª—å—Ü–∞)
        me = await self.client.get_me()
        if m.sender_id == me.id:
            return

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É .ii, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        if m.text and m.text.lower().startswith(".ii"):
            return

        # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not m.text:
            await m.reply(self.strings("not_text"))
            return

        persona_name = self.config["persona_name"]
        history_limit = self.config["history_limit"]
        min_delay = self.config["min_delay"]
        max_delay = self.config["max_delay"]
        ai_model = self.config["ai_model"]
        ai_timeout = self.config["ai_timeout"]

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            history_messages = []
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º iter_messages –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞
            async for msg_hist in self.client.iter_messages(chat_id, limit=history_limit):
                if msg_hist.text:
                    sender = await msg_hist.get_sender() # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                    sender_name = persona_name if sender and sender.id == me.id else (sender.first_name or sender.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_{msg_hist.sender_id}")
                    history_messages.append(f"{sender_name}: {msg_hist.text}")
            
            # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –≤ –Ω–∞—á–∞–ª–µ (—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫)
            history_string = "\n".join(reversed(history_messages))

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI —Å —É—á–µ—Ç–æ–º persona –∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
            prompt_content = (
                f"–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram —Å –Ω–∏–∫–Ω–µ–π–º–æ–º {persona_name}. "
                f"–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç ‚Äî 18 –ª–µ—Ç, –∏ —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. "
                f"–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ –¥–ª—è –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. "
                f"–£–ø–æ–º–∏–Ω–∞–π —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–±—è –æ–± —ç—Ç–æ–º –ø—Ä—è–º–æ —Å–ø—Ä–æ—Å—è—Ç. "
                f"–í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:\n\n{history_string}\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {m.text}"
            )

            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å "–¥—É–º–∞—é—â–µ–≥–æ" —á–µ–ª–æ–≤–µ–∫–∞
            delay = random.uniform(min_delay, max_delay)
            await asyncio.sleep(delay)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é..." –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            thinking_message = await m.reply(self.strings("processing"))

            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è g4f.ChatCompletion.create
                # g4f –æ–∂–∏–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å 'role' –∏ 'content'
                g4f_messages = [{"role": "user", "content": prompt_content}]

                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–∑–æ–≤ g4f API
                full_response_text = ""
                response_generator = g4f.ChatCompletion.create(
                    model=ai_model, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å AI, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'gpt-4')
                    messages=g4f_messages,
                    stream=True, # –í–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
                    timeout=ai_timeout, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                )

                # –ü–æ—Ç–æ–∫–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é..."
                last_edited_text = ""
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞
                async for message_chunk in response_generator:
                    if message_chunk and message_chunk != "[DONE]": # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏ —Å–∏–≥–Ω–∞–ª [DONE]
                        full_response_text += message_chunk
                        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π)
                        if len(full_response_text) - len(last_edited_text) > 50 or len(full_response_text) < 20: 
                            try:
                                await thinking_message.edit(full_response_text)
                                last_edited_text = full_response_text
                            except Exception as edit_e:
                                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {edit_e}")
                                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã —Ö–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ –æ—Ç–≤–µ—Ç
                if not full_response_text.strip():
                    raise ValueError(self.strings("g4f_not_working").format(ai_model))

                # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
                await thinking_message.edit(full_response_text)

            except asyncio.TimeoutError:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
                await thinking_message.edit(self.strings("error_timeout"))
            except Exception as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è g4f –∏–ª–∏ –æ–±—â–∏—Ö
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç g4f: {e}", exc_info=True)
                if "Model not found" in str(e) or "No provider" in str(e) or "Rate limit" in str(e) or "Failed to connect" in str(e):
                    # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ g4f
                    error_message_to_send = self.strings("g4f_not_working").format(ai_model)
                else:
                    error_message_to_send = self.strings("error_processing").format(e)
                await thinking_message.edit(error_message_to_send)

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–∏—Ö –≤–Ω–µ –±–ª–æ–∫–∞ –≤—ã–∑–æ–≤–∞ g4f (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏)
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ Gpt4PersonaMod (–≤–Ω–µ—à–Ω–∏–π –±–ª–æ–∫): {e}", exc_info=True)
            try:
                await m.reply(self.strings("error_processing").format(e))
            except Exception as reply_e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π: {reply_e}", exc_info=True)
